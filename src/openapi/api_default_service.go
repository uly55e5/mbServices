/*
 * MassBank Minio API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"github.com/uly55e5/mbServices/src/redisstore"
)

// DefaultApiService is a service that implements the logic for the DefaultApiServicer
// This service should implement the business logic for every endpoint for the DefaultApi API.
// Include any external packages or services that will be required by this service.
type DefaultApiService struct {
}

func (s *DefaultApiService) DeleteAllConnections(ctx context.Context) (ImplResponse, error) {
	err := redisstore.DeleteAllConnections()
	if err != nil {
		return Response(400, nil), err
	}
	return Response(200, nil), nil
}

// NewDefaultApiService creates a default api service
func NewDefaultApiService() DefaultApiServicer {
	return &DefaultApiService{}
}

// AddConnection -
func (s *DefaultApiService) AddConnection(ctx context.Context, connection Connection) (ImplResponse, error) {
	j, err := json.Marshal(connection)
	if err != nil {
		return Response(409, nil), err
	}
	js := string(j)
	err = redisstore.StoreConnection(js)
	if err == nil {
		return Response(200, nil), nil
	}
	return Response(409, nil), err
}

// GetConnections -
func (s *DefaultApiService) GetConnections(ctx context.Context) (ImplResponse, error) {
	ss, err := redisstore.GetConnections()
	if err != nil {
		return Response(500, nil), err
	}
	cc := []Connection{}
	for _, s := range ss {
		c := Connection{}
		err = json.Unmarshal([]byte(s), &c)
		if err != nil {
			return Response(500, nil), err
		}
		cc = append(cc, c)
	}
	if err != nil {
		return Response(500, nil), err
	}
	//j, err := json.Marshal(cc)
	r := Response(200, cc)
	r.Headers = map[string][]string{"Content-Type": {"application/json"}}
	return r, nil
}
